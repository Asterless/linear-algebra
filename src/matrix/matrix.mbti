package KCN-judu/linear-algebra/matrix

alias @KCN-judu/linear-algebra/vector as @vector

// Values

// Types and methods
pub(all) struct Matrix {
  data : Array[Double]
  col : Int
  row : Int
  stride : Int
}
impl Matrix {
  add_constant(Self, Double) -> Unit
  add_diagonal(Self, Double) -> Unit
  at(Self, Int, Int) -> Double
  col_vec(Self, Int) -> @vector.Vector
  copy(Self) -> Self
  diagonal_vec(Self) -> @vector.Vector
  div_elements(Self, Self) -> Self
  div_elements_inplace(Self, Self) -> Unit
  filled_matrix(Int, Int, Double) -> Self
  is_neg(Self) -> Bool
  is_non_neg(Self) -> Bool
  is_null(Self) -> Bool
  is_pos(Self) -> Bool
  map(Self, (Double) -> Double) -> Self
  map_inplace(Self, (Double) -> Double) -> Unit
  mul_elements(Self, Self) -> Self
  mul_elements_inplace(Self, Self) -> Unit
  new(Int, Int, stride~ : Int = ..) -> Self
  norm_1(Self) -> Double
  op_add(Self, Self) -> Self
  op_as_view(Self, index~ : Int = .., ViewMode) -> MatrixView
  op_mul(Self, Self) -> Self
  op_sub(Self, Self) -> Self
  row_vec(Self, Int) -> @vector.Vector
  scale(Self, Double) -> Unit
  scale_col(Self, @vector.Vector) -> Unit
  scale_row(Self, @vector.Vector) -> Unit
  subcol_vec(Self, Int, Int, Int) -> @vector.Vector
  subdiagonal_vec(Self) -> @vector.Vector
  subrow_vec(Self, Int, Int, Int) -> @vector.Vector
  superdiagonal_vec(Self) -> @vector.Vector
  view(Self, index~ : Int = .., start~ : Int = .., num~ : Int = .., ViewMode) -> MatrixView
  zero_matrix(Int, Int) -> Self
}
impl Eq for Matrix
impl Show for Matrix

pub(all) struct MatrixView {
  matrix : Matrix
  index : Int
  start : Int
  num : Int
  view_mode : ViewMode
}
impl MatrixView {
  map_inplace(Self, (Double) -> Double) -> Unit
  scale_view(Self, Double) -> Self
}

pub enum ViewMode {
  Row
  Col
  Diagonal
  SubDiagonal
  SuperDiagonal
  SubRow
  SubCol
}
impl Eq for ViewMode
impl Show for ViewMode

// Type aliases

// Traits

